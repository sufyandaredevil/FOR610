SANS FOR610(2021) NOTES:

utils:
jq - json pretty printing and more...
cyberchef - encode, decode, encrypt, decrypt strings and more...

fakedns - dns resol
inetsim - http, https, smtp, ftp, pop3, tftp, irc and more...
fiddler

iptables

static process analysis tools:
strings
pestr
bintext(gui)
peframe (yara plugins, anti dbg, network http, screenshot, winreg) | pescanner.py
pestudio(gui)
die(gui) | diec
exeinfo
cff explorer

behavioral process analysis tools:
process hacker(gui)
process monitor(gui)
regshot(gui)
procmon(gui)
procdot(gui)
wireshark(gui)

code analysis(emulated)
run_speakeasy.py
capa
scdbg = sense capabilities of shellcode

code analysis(dynamic)
x64dbg
Scylla = used for fixing IAT for an exe
Ollydump = used for dumping unpacked exe
API Monitor

JS scripts analysis:
js-beautify = pretty print js
js = spidermonkey engine util in remnux
cscript = jsengine util in windows
AMSI(AntiMalware Scan Interface) = generally used to check script execution

TO REM:
look out for functions in symbol references like:
reg
internet
http
GetTempPathW
GetTempFileNameW
CreateProcess
resource
loadlibrary
ShellExecute

to load a program with the mentioned ImageBase we need to turn off ASLR
to switch off aslr while analyzing:
open cff explorer goto optional header & 
view DLLCharacteristics and it shows "click here"
so click and uncheck DLL can move &file > save

for packed malware misc:
use Scylla(standalone) by first running the malware
click dump then IAT autosearch
then get imports and finally fix the dump
(this still wont fix the dumped malware
as the entry point wont be changed from the unpacking alg.)
To fix that we can use the original malware and use x64dbg and ollydump to find the OEP
and then dump it.
After dump use scylla plugin in xdbg to fix IAT and dump the result to the ollydump exe

when analyzing functions:
EBP - (anything) = local variable for that function
EBP + (anything) = parameters pass for that function

to analyze malicious pdf:
for recon - pdfid.py, pdfparser.py

when analyzing jscripts:
look out for eval
(when running a js script in remnux that is specific to windows it might miss functions
that are not available in linux, so polyfilling can be done)

for Malware that performs Code Injection always try finding the function call pattern:
CreateToolHelp32Snapshot / EnumProcesses
OpenProcess
VirtualAllocEx
WriteProcessMemory
CreateRemoteThread
(start from CreateRemoteThread and above)
Try using function call tree window in ghidra to get a better view of function calls
Another way of code injection is place an evil.dll in disk and let the victim process load it using the LoadLibrary API with the above given function call pattern

Native APIs starting with prefixes Nt, Zw, Rtl are only called by Windows APIs
and malware authors call them directly avoiding WinApis
(Also there are NativeAPI alternatives of WinAPI)

